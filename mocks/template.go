// Code generated by MockGen. DO NOT EDIT.
// Source: templaterunner/template.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	templaterunner "github.com/yoennisrg/gitflow-cli/template"
	reflect "reflect"
)

// MockPromptManager is a mock of PromptManager interface
type MockPromptManager struct {
	ctrl     *gomock.Controller
	recorder *MockPromptManagerMockRecorder
}

// MockPromptManagerMockRecorder is the mock recorder for MockPromptManager
type MockPromptManagerMockRecorder struct {
	mock *MockPromptManager
}

// NewMockPromptManager creates a new mock instance
func NewMockPromptManager(ctrl *gomock.Controller) *MockPromptManager {
	mock := &MockPromptManager{ctrl: ctrl}
	mock.recorder = &MockPromptManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPromptManager) EXPECT() *MockPromptManagerMockRecorder {
	return m.recorder
}

// ReadValue mocks base method
func (m *MockPromptManager) ReadValue(title, errorMessage, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadValue", title, errorMessage, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadValue indicates an expected call of ReadValue
func (mr *MockPromptManagerMockRecorder) ReadValue(title, errorMessage, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadValue", reflect.TypeOf((*MockPromptManager)(nil).ReadValue), title, errorMessage, defaultValue)
}

// ReadValueFromList mocks base method
func (m *MockPromptManager) ReadValueFromList(title string, options []templaterunner.Options) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadValueFromList", title, options)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadValueFromList indicates an expected call of ReadValueFromList
func (mr *MockPromptManagerMockRecorder) ReadValueFromList(title, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadValueFromList", reflect.TypeOf((*MockPromptManager)(nil).ReadValueFromList), title, options)
}

// MockTemplateRunner is a mock of TemplateRunner interface
type MockTemplateRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRunnerMockRecorder
}

// MockTemplateRunnerMockRecorder is the mock recorder for MockTemplateRunner
type MockTemplateRunnerMockRecorder struct {
	mock *MockTemplateRunner
}

// NewMockTemplateRunner creates a new mock instance
func NewMockTemplateRunner(ctrl *gomock.Controller) *MockTemplateRunner {
	mock := &MockTemplateRunner{ctrl: ctrl}
	mock.recorder = &MockTemplateRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateRunner) EXPECT() *MockTemplateRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockTemplateRunner) Run(yamlData string, injectedVariables map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", yamlData, injectedVariables)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockTemplateRunnerMockRecorder) Run(yamlData, injectedVariables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTemplateRunner)(nil).Run), yamlData, injectedVariables)
}
